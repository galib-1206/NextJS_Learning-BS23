{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/bs949/Documents/NextJS_Learning-BS23/06-nextjs-starting-project /pages/index.js\";\n//our-domain.com\n//showing meetup lists\nimport MeetupList from \"../components/meetups/MeetupList\"; // create dummy object to pass\n\nconst DUMMY_MEETUPS = [{\n  id: \"m1\",\n  title: \"A First Meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Uganada\",\n  description: \"This is a First Meetup!\"\n}, {\n  id: \"m2\",\n  title: \"A Second Meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Barmuda\",\n  description: \"This is a Second Meetup!\"\n}];\n\nfunction HomePage(props) {\n  // const [loadedMeetups, setLoadedMeetups]= useState([]);\n  // useEffect(() => {\n  //   //send a http req & fetch data\n  //   setLoadedMeetups(DUMMY_MEETUPS)\n  // }, []);\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n} //async(promising)-> wait intill data is loaded\n//getStaticProps(), creats props for the page at the very first before executing component page.\n\n\nexport async function getStaticProps() {\n  //fetch data from API or read DB\n  return {\n    props: {\n      meetups: DUMMY_MEETUPS\n    }\n  };\n}\nexport default HomePage;\n/* Rendering:\n\n At first Home component page rendering->loadedMeetups will be  an empty array\n in that moment UseEffect will be executed->update state->component will be executed again\n ->Rerendering list \n\nso, there's is 2 render cycle -> create issue in search engine optimization(SEO)\n\nif we see in page source after 1st rendeing , items (are seen in the UI) will be found empty in HTML page\nwhich is fetching from server ! (becuase 2nd cycle is not occured yet)\n\nSo, Pre rendering(SSG,SSR) is a solution for this As it's not waiting for 2nd cycle \nAlso SEO optimization is quick , not loading!!!!!\n\n--SSG\nBy default, NextJS prepared pages staticly in build process. \nWhen you use the getStaticProps function in a Next.js page, the page is automatically pre-rendered at build time. \nThe data returned from getStaticProps is used to generate the static HTML pages.\nThe generated HTML pages are stored and served to clients without the need for additional server-side processing.\nThese static pages can be served from a Content Delivery Network (CDN) for improved performance and lower latency.\n*/","map":{"version":3,"sources":["/home/bs949/Documents/NextJS_Learning-BS23/06-nextjs-starting-project /pages/index.js"],"names":["MeetupList","DUMMY_MEETUPS","id","title","image","address","description","HomePage","props","meetups","getStaticProps"],"mappings":";;AAAA;AACA;AACA,OAAOA,UAAP,MAAuB,kCAAvB,C,CAGA;;AACA,MAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,gBAFT;AAGEC,EAAAA,KAAK,EACH,wHAJJ;AAKEC,EAAAA,OAAO,EAAE,SALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CADoB,EASpB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,iBAFT;AAGEC,EAAAA,KAAK,EACH,wHAJJ;AAKEC,EAAAA,OAAO,EAAE,SALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CAToB,CAAtB;;AAmBA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB;AACA;AACA;AACA;AACA;AACA,sBACI,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UADJ;AAGD,C,CAED;AACA;;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,SAAO;AACLF,IAAAA,KAAK,EAAC;AACJC,MAAAA,OAAO,EAACR;AADJ;AADD,GAAP;AAKD;AAED,eAAeM,QAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["//our-domain.com\n//showing meetup lists\nimport MeetupList from \"../components/meetups/MeetupList\";\n\n\n// create dummy object to pass\nconst DUMMY_MEETUPS = [\n  {\n    id: \"m1\",\n    title: \"A First Meetup\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n    address: \"Uganada\",\n    description: \"This is a First Meetup!\",\n  },\n  {\n    id: \"m2\",\n    title: \"A Second Meetup\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n    address: \"Barmuda\",\n    description: \"This is a Second Meetup!\",\n  },\n];\n\nfunction HomePage(props) {\n  // const [loadedMeetups, setLoadedMeetups]= useState([]);\n  // useEffect(() => {\n  //   //send a http req & fetch data\n  //   setLoadedMeetups(DUMMY_MEETUPS)\n  // }, []);\n  return (\n      <MeetupList meetups={props.meetups} />\n  );\n}\n\n//async(promising)-> wait intill data is loaded\n//getStaticProps(), creats props for the page at the very first before executing component page.\n\nexport async function getStaticProps() {\n  //fetch data from API or read DB\n  return {\n    props:{\n      meetups:DUMMY_MEETUPS\n    }\n  }\n}\n\nexport default HomePage;\n/* Rendering:\n\n At first Home component page rendering->loadedMeetups will be  an empty array\n in that moment UseEffect will be executed->update state->component will be executed again\n ->Rerendering list \n\nso, there's is 2 render cycle -> create issue in search engine optimization(SEO)\n\nif we see in page source after 1st rendeing , items (are seen in the UI) will be found empty in HTML page\nwhich is fetching from server ! (becuase 2nd cycle is not occured yet)\n\nSo, Pre rendering(SSG,SSR) is a solution for this As it's not waiting for 2nd cycle \nAlso SEO optimization is quick , not loading!!!!!\n\n--SSG\nBy default, NextJS prepared pages staticly in build process. \nWhen you use the getStaticProps function in a Next.js page, the page is automatically pre-rendered at build time. \nThe data returned from getStaticProps is used to generate the static HTML pages.\nThe generated HTML pages are stored and served to clients without the need for additional server-side processing.\nThese static pages can be served from a Content Delivery Network (CDN) for improved performance and lower latency.\n*/"]},"metadata":{},"sourceType":"module"}